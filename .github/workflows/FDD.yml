name: microG Build

on:
  workflow_dispatch:

env:
  TOKEN: ${{ secrets.TOKEN }}
  RELEASE: v1.9
  VARIANT: FDD

jobs:
  build:
    if: github.repository_owner == 'BiTGApps'
    runs-on: ubuntu-latest

    steps:
       - name: Initial Setup
         uses: actions/checkout@v3

       - name: Create microG
         run: |
           rm -rf microG
           mkdir microG
           install -d out

       - name: Clone Build Sources
         run: |
           git clone https://github.com/BiTGApps/microG-Variants microG

       - name: Create Sources
         run: |
           mkdir microG/sources

       - name: Clone Package Sources
         run: |
           git clone https://github.com/BiTGApps/microG-sources microG/sources/microG-sources

       - name: Build microG Package
         run: |
           cd microG
           . scripts/envsetup.sh && rm -rf scripts
           sed -i -e "s/NULL/70000/g" util_functions.sh
           zip -qr9 MicroG-$RELEASE.zip * && cd ..
           cp -f microG/MicroG-$RELEASE.zip out

       - name: Sign microG Package
         run: |
           wget https://github.com/BiTGApps/BiTGApps/raw/master/tools/zipsigner/zipsigner.jar
           sudo java -jar zipsigner.jar out/MicroG-$RELEASE.zip out/MicroG-$RELEASE-Signed.zip
           mv -f out/MicroG-$RELEASE-Signed.zip out/MicroG-$RELEASE-$VARIANT.zip

       - name: Github Release CLI
         run: |
           npm install -g github-release-cli

       - name: Release Signed Package
         env:
           PACKAGE: false
         run: |
           github-release upload \
           --owner "BiTGApps" \
           --repo "microG-Variants" \
           --token "$TOKEN" \
           --tag "${RELEASE}" \
           --release-name "MicroG ${RELEASE}" \
           "out/MicroG-$RELEASE-$VARIANT.zip"

       - name: Upload Build Artifact
         if: ${{ env.PACKAGE == 'true' }}
         uses: actions/upload-artifact@v3
         with:
           name: microG-Build
           path: out/MicroG-$RELEASE-$VARIANT.zip

       - name: Cleanup
         run: |
           rm -rf microG out
